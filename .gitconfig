[alias]

  # View abbreviated SHA, description, and history graph of the latest 20 commits
  l = log --pretty=oneline -n 20 --graph --abbrev-commit
  ll = log --pretty=format:'%Cblue(%an)%Creset %Cred %s %Creset%w(0,0,16)%b' -n 20 --graph --abbrev-commit 

  # View the current working tree status using the short format
  s = status -s

  # Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

  # Pull in remote changes for the current repository and all its submodules
  p = !"git pull; git submodule foreach git pull origin master"

  # Checkout
  c = checkout

  # Checkout previous branch
  c- = checkout -

  # Merge previous branch
  m- = merge -

  # Commit all changes
  ca = !git add -A && git commit -av

  # Switch to a branch, creating it if necessary
  go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

  # Delete tag localy and remotely
  deltag = !sh -c 'git tag --delete $1 && git push origin :refs/tags/$1' -
  
  # Show verbose output about tags, branches or remotes
  tags = tag -l
  b = !git for-each-ref --sort=-committerdate refs/heads --format='%(HEAD)%(color:yellow)%(refname:short)|%(color:red)%(objectname:short)|%(color:green)%(committerdate:relative)'|column -ts'|'
  bv = !git for-each-ref --sort=-committerdate refs/heads --format='%(HEAD)%(color:yellow)%(refname:short)|%(color:red)%(objectname:short)|%(color:green)%(committerdate:relative)|%(color:reset)%(subject)%(color:reset)'|column -ts'|'
  branches = branch -a
  remotes = remote -v

  # Amend the currently staged files to the latest commit
  amend = commit --amend --reuse-message=HEAD

  # Credit an author on the latest commit
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

  # Interactive rebase with the given number of latest commits
  reb = "!r() { git rebase -i HEAD~$1; }; r"

  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"

  # Find tags containing commit
  ft = "!f() { git describe --always --contains $1; }; f"

  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

  # Remove branches that have already been merged with master
  # a.k.a. ‘delete merged’
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # List contributors with number of commits
  contributors = shortlog --summary --numbered

  # Merge GitHub pull request on top of the `master` branch
  mpr = "!f() { \
    if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
      git fetch origin refs/pull/$1/head:pr/$1 && \
      git rebase master pr/$1 && \
      git checkout master && \
      git merge pr/$1 && \
      git branch -D pr/$1 && \
      git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
    fi \
  }; f"

	fame = python --version -m gitfame

  burn = !"git clean -d -f -x; git reset --hard"

  # submodules related commands
  sdiff = "!git diff && git submodule foreach 'git diff'"
  spush = "push --recurse-submodules=on-demand"
  supdate = "submodule update --remote --m"
  sburn = "submodule foreach 'git clean -d -f -x && git reset --hard'"
  # submodules status with pretty colors
  sf = !python ~/scripts/git-submodules-status.py
  ss = !python ~/scripts/git-submodules-status.py --status --short
  sss = !python ~/scripts/git-submodules-status.py --short

[core]
  autocrlf = false
  editor = vim
	excludesfile = /Users/telescope/.gitignore_global
	pager = diff-so-fancy | less --tabs=4 -RFX

[credential]
	helper = cache --timeout=3600

[format]
  pretty = format:%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) [%an]%Creset

[color]
	ui = always
	branch = always
	diff = always
	interactive = always
	status = always
	grep = always
	pager = true
	decorate = always
	showbranch = always
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red
  new = green
[color "status"]
  added = yellow
  changed = green
  untracked = cyan
[advice]
  statusHints = false
[help]
  autocorrect = 1
[mergetool]
  prompt = false
[mergetool "mvimdiff"]
  keepbackup=false
[merge]
  log = true
  summary = true
  verbosity = 1
	tool = meld
[diff]
  # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
  # instead of a/b/c/d as prefixes for patches
  mnemonicprefix = true
  algorithm = patience
	tool = meld
	submodule = log
[status]
	submoduleSummary = true
[include]
  path = .gitconfig.user
